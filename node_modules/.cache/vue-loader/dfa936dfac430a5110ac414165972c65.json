{"remainingRequest":"/home/tal/development/vue-scaffold/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tal/development/vue-scaffold/src/views/ChatRoom.vue?vue&type=style&index=0&id=62ea4d0d&scoped=true&lang=css&","dependencies":[{"path":"/home/tal/development/vue-scaffold/src/views/ChatRoom.vue","mtime":1599596288874},{"path":"/home/tal/development/vue-scaffold/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tal/development/vue-scaffold/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/tal/development/vue-scaffold/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/tal/development/vue-scaffold/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tal/development/vue-scaffold/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouY2hhdFJvb20gewogIG1hcmdpbi1sZWZ0OiAxNTBweDsKICBoZWlnaHQ6IDkwdmg7Cn0K"},{"version":3,"sources":["ChatRoom.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqJA;AACA;AACA;AACA","file":"ChatRoom.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"chatRoom\">\n    <v-navigation-drawer :permanent=\"true\" absolute dark fixed :width=\"150\">\n      <v-list dense nav>\n        <v-list-item two-line>\n          <v-list-item-content>\n            <v-list-item-title></v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n        <v-list-item-subtitle>users</v-list-item-subtitle>\n        <v-divider></v-divider>\n        <v-list-item v-for=\"item in usersInRoom\" :key=\"item.id\" link>\n          <v-list-item-content v-if=\"allUsersList[item]\">\n            <v-list-item-title>{{ allUsersList[item].name }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n      </v-list>\n    </v-navigation-drawer>\n    <v-list>\n      <v-list-item-group>\n        <v-list id=\"listOfText\" class=\"overflow-y-auto\" style=\"max-height: 85vh;\" two-line>\n          <template v-for=\"(item, index) in chatData[this.$router.currentRoute.params.roomId]\">\n            <v-list-item :key=\"index\">\n              <v-list-item-avatar>\n                <img src=\"@/assets/puppy.jpg\" />\n              </v-list-item-avatar>\n              <v-list-item-content v-if=\"allUsersList[item.userId]\">\n                <v-list-item-title v-html=\"allUsersList[item.userId].name\"></v-list-item-title>\n                <v-list-item-subtitle v-html=\"item.text\"></v-list-item-subtitle>\n              </v-list-item-content>\n            </v-list-item>\n          </template>\n        </v-list>\n      </v-list-item-group>\n    </v-list>\n\n    <v-footer style=\"height: 10vh;\" dark fixed>\n      <v-row justify=\"center\" no-gutters>\n        <form @submit.prevent=\"onSubmit\">\n          <v-text-field\n            v-model=\"message\"\n            style=\" display: inline-block;\"\n            label=\"Message\"\n            on:submit.prevent=\"onSubmit\"\n          ></v-text-field>\n          <v-btn\n            type=\"submit\"\n            class=\"ma-2\"\n            style=\" display: inline-block;\"\n            outlined\n            color=\"white\"\n          >Send</v-btn>\n        </form>\n      </v-row>\n    </v-footer>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nconst axios = require(\"axios\");\nimport store from \"../store\";\n\nexport default {\n  name: \"ChatRoom\",\n  data() {\n    return {\n      message: \"\",\n      roomNum: this.$router.currentRoute.params.roomId,\n      usersInRoom: [],\n    };\n  },\n  props: {},\n  mounted() {\n    this.getChatText();\n    this.getUserList();\n    this.getAllUsers();\n  },\n  methods: {\n    scrollToEnd: function () {\n      var container = this.$el.querySelector(\"#listOfText\");\n      container.scrollTop = container.scrollHeight;\n    },\n    onSubmit() {\n      if (this.message !== \"\") {\n        axios\n          .post(`/rooms/${this.roomNum}/text`, {\n            text: this.message,\n            userId: this.loggedinUser.id,\n          })\n          .then(() => {\n            this.getChatText();\n          })\n          .catch(function (error) {\n            console.error(error);\n          });\n      }\n    },\n    getChatText() {\n      axios\n        .get(`/rooms/${this.roomNum}/text`)\n        .then((response) => {\n          let rId = this.$router.currentRoute.params.roomId;\n          let chatData = [];\n          chatData[rId] = response.data.text;\n          store.dispatch(\"rooms/setChatData\", chatData);\n          this.$nextTick(function () {\n            this.scrollToEnd();\n          });\n        })\n        .catch(function (error) {\n          console.error(error);\n        });\n    },\n    getUserList() {\n      axios\n        .get(`/rooms/${this.roomNum}/users`)\n        .then((response) => {\n          this.usersInRoom = new Set(response.data.users);\n          store.dispatch(\"rooms/setUsers\", response.data.users);\n        })\n        .catch(function (error) {\n          console.error(error);\n        });\n    },\n\n    getAllUsers() {\n      axios\n        .get(`/users`)\n        .then((response) => {\n          store.dispatch(\"rooms/setAllUsers\", response.data);\n        })\n        .catch(function (error) {\n          console.error(error);\n        });\n    },\n  },\n  computed: {\n    ...mapGetters({\n      chatData: \"rooms/chatData\",\n      usersList: \"rooms/usersList\",\n      allUsersList: \"rooms/allUsersList\",\n      loggedinUser: \"rooms/loggedinUser\",\n    }),\n  },\n};\n</script>\n\n<style scoped>\n.chatRoom {\n  margin-left: 150px;\n  height: 90vh;\n}\n</style>\n"]}]}